<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xml"#>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System.Xml" #>
<#@ output extension=".cs" #>
using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;

// WARNING: This file is auto generated. Do not modify it's contents
namespace Bys.Globalization
{
    public static class Messages
    {
<#
    var thisFileFolder = Path.GetDirectoryName(Host.TemplateFile);
    var solutionDirectory = Path.GetFullPath(Path.Combine(thisFileFolder, @".."));

    var languageFiles = Directory.GetFiles(string.IsNullOrWhiteSpace(thisFileFolder) ? "." : thisFileFolder, "lang-*.xml", SearchOption.AllDirectories).OrderBy(x => x).ToArray();

    ProcessFiles(solutionDirectory, languageFiles);
    #>
    }
}
<#+
    private class Language
    {
        public string LanguageCode { get; private set; }

        public bool IsJavaScript { get; private set; }

        public Dictionary<string, Node> Nodes { get; private set; }

        public Language(string languageCode, bool isJavaScript)
        {
            LanguageCode = languageCode;
            IsJavaScript = isJavaScript;
            Nodes = new Dictionary<string, Node>();
        }
    }

    private class Node
    {
        public string Name { get; private set; }

        public string TextValue { get; set; }

        public string XmlValue { get; set; }

        public int FormatParamsCount { get; set; }

        public Dictionary<string, Node> Children { get; private set; }

        public Node(string name, string textValue, string xmlValue)
        {
            Name = name;
            TextValue = textValue;
            XmlValue = xmlValue;
            Children = new Dictionary<string, Node>();
        }
    }

    private void ProcessFiles(string solutionDirectory, string[] languageFiles)
    {
        var languages = LoadAndMergeNodes(languageFiles);
        foreach (var language in languages)
        {
            if (language.IsJavaScript)
            {
                // for JS, we need to generate file for each language + `test` language based on `default`
                WriteJs(solutionDirectory, language, false);
                if (language.LanguageCode == "default")
                {
                    WriteJs(solutionDirectory, language, true);
                }
            }

            // for C#, we need to generate files only for `default` but check that other files are OK
            if (language.LanguageCode == "default")
            {
                WriteCSharp(language);
            }
        }
    }

    private Language[] LoadAndMergeNodes(string[] languageFiles)
    {
        var languages = new List<Language>();

        foreach (var languageFile in languageFiles.OrderBy(x => x))
        {
            var doc = new XmlDocument();
            doc.Load(languageFile);

            var languageNodes = doc.SelectNodes("/languages/language");
            foreach (XmlNode languageNode in languageNodes)
            {
                var languageId = languageNode.Attributes["id"].Value;
                var isJavaScript = languageNode.Attributes["javascript"] != null && languageNode.Attributes["javascript"].Value == "yes";

                var language = languages.FirstOrDefault(x => x.LanguageCode == languageId && x.IsJavaScript == isJavaScript);
                if (language == null)
                {
                    language = new Language(languageId, isJavaScript);
                    languages.Add(language);
                }

                var prefix = Path.GetFileNameWithoutExtension(languageFile).Split('-')[1];

                Node topNode;
                if (!language.Nodes.TryGetValue(prefix, out topNode))
                {
                    topNode = new Node(prefix, null, null);
                    language.Nodes.Add(prefix, topNode);
                }

                LoadAndMergeNodes(topNode.Children, languageNode.ChildNodes);
            }
        }

        return languages.ToArray();
    }

    private void LoadAndMergeNodes(Dictionary<string, Node> parsedNodes, XmlNodeList xmlNodes)
    {
        for (int i = 0; i < xmlNodes.Count; i++)
        {
            var xmlNode = xmlNodes[i];

            var name = xmlNode.Name;
            var innerNodes = xmlNode.SelectNodes("*");
            var textValue = innerNodes.Count > 0 ? null : xmlNode.InnerText;
            var xmlValue = innerNodes.Count > 0 ? null : xmlNode.InnerXml;

            Node parsedNode;
            if (!parsedNodes.TryGetValue(name, out parsedNode))
            {
                parsedNode = new Node(name, textValue, xmlValue);
                parsedNodes.Add(name, parsedNode);
            }
            else
            {
                parsedNode.TextValue = textValue;
                parsedNode.XmlValue = xmlValue;
            }

            if (innerNodes.Count > 0)
            {
                LoadAndMergeNodes(parsedNode.Children, innerNodes);
            }
        }
    }

    private void WriteCSharp(Language language)
    {
        var nodes = language.Nodes.Select(x => x.Value).ToArray();
        foreach (var node in nodes)
        {
            var classesChain = node.Name.Split('.');
            var indentLevel = 0;
            foreach (var className in classesChain)
            {
                indentLevel++;

                var indent = new StringBuilder().Append(' ', 4 + indentLevel * 4);
                WriteLine("{0}public static partial class {1}", indent, className);
                WriteLine("{0}{{", indent);
            }

            WriteCSharp(node.Children, indentLevel, node.Name);

            for (int i = indentLevel; i > 0; i--)
            {
                var indent = new StringBuilder().Append(' ', 4 + i * 4);
                WriteLine("{0}}}", indent);
            }
        }
    }

    private void WriteCSharp(Dictionary<string, Node> parsedNodes, int indentLevel, string currentPath)
    {
        var indent = new StringBuilder().Append(' ', 8 + indentLevel * 4).ToString();
        var nodes = parsedNodes.Select(x => x.Value).ToArray();

        for (int i = 0; i < nodes.Length; i++)
        {
            var node = nodes[i];

            if (i > 0)
            {
                WriteLine("");
            }

            var name = MakeFirstUpper(node.Name);
            var currentNodePath = currentPath + "." + node.Name;

            if (node.Children.Count > 0)
            {
                WriteLine("{0}public static partial class {1}", indent, name);
                WriteLine("{0}{{", indent);

                WriteCSharp(node.Children, indentLevel + 1, currentNodePath);

                WriteLine("{0}}}", indent);
            }
            else
            {
                var value = node.TextValue.Replace("\"", "\"\"");

                var valueWithParams = ParseFormatString(value, true);

                WriteLine("{0}public const string {1}LanguageKey = \"{2}\";", indent, name, currentNodePath);
                WriteLine("");

                WriteLine(indent + "/// <summary>");
                WriteLine(string.Join(Environment.NewLine, node.XmlValue.Split(new[] { Environment.NewLine }, StringSplitOptions.None).Select(x => indent + "/// " + x + "<br/>")));
                WriteLine(indent + "/// </summary>");

                if (valueWithParams.Length > 1)
                {
                    var paramDeclaration = string.Join(", ", valueWithParams.Skip(1).Select(x => "object " + x));
                    var paramUsage = string.Join(", ", valueWithParams.Skip(1));
                    WriteLine(@"{0}public static string {1}({3}) {{ 
{0}    return string.Format(CultureInfo.InvariantCulture, global::Bys.Globalization.Text.Get({1}LanguageKey), {4});
{0}}}
", indent, name, currentNodePath, paramDeclaration, paramUsage);
                }
                else
                {
                    WriteLine("{0}public static string {1} {{ get {{ return global::Bys.Globalization.Text.Get({1}LanguageKey); }} }}", indent, name, currentNodePath);
                }
            }
        }
    }

    private static void WriteJs(string solutionDirectory, Language language, bool testMode)
    {
        var id = testMode ? "test" : language.LanguageCode;
        var path = Path.Combine(solutionDirectory, @"Siberia.Web\static\js\globalization\text." + id + ".generated." + (id == "default" ? "js" : "txt"));
        var text = WriteJs(language.Nodes, testMode);
        File.WriteAllText(path, text);
    }

    private static string WriteJs(Dictionary<string, Node> parsedNodes, bool testMode)
    {
        var sb = new StringBuilder();
        sb.Append(@"// WARNING: This file is auto generated. Do not modify it's contents
(function() {

  var f = function(format) {
    var args = Array.prototype.slice.call(arguments, 1);
    return format.replace(/{(\d+)}/g, function(match, number) {
      return typeof args[number] != 'undefined' ? args[number] : match;
    });
  }

  text = {
");
        WriteJs(parsedNodes.SelectMany(x => x.Value.Children).ToDictionary(x => x.Key, x => x.Value), 0, "/", sb, testMode);
        sb.Append(@"  };
})();");
        return sb.ToString();
    }

    private static void WriteJs(Dictionary<string, Node> parsedNodes, int indentLevel, string path, StringBuilder sb, bool testMode)
    {
        var indent = new StringBuilder().Append(' ', 4 + indentLevel * 2).ToString();

        var nodes = parsedNodes.Select(x => x.Value).ToArray();

        for (int i = 0; i < nodes.Length; i++)
        {
            var node = nodes[i];

            var lastComma = i + 1 == nodes.Length ? "" : ",";

            var name = node.Name;
            var currentPath = path + name + "/";

            if (node.Children.Count > 0)
            {
                sb.AppendFormat("{0}{1}: {{\r\n", indent, name);

                WriteJs(node.Children, indentLevel + 1, currentPath, sb, testMode);

                sb.AppendFormat("{0}}}{1}\r\n", indent, lastComma);
            }
            else
            {
                var value = node.TextValue.Replace("'", @"\'").Replace("\r\n", "\\\r\n");
                var valueWithParams = ParseFormatString(value, false);
                var format = testMode ? ReplaceTestMode(valueWithParams[0]) : valueWithParams[0];
                var paramNames = string.Join(", ", valueWithParams.Skip(1));
                var text = valueWithParams.Length == 1
                    ? "'" + format + "'"
                    : string.Format("function({1}) {{ return f('{0}', {1}); }}", format, paramNames);

                sb.AppendFormat("{0}{1}: {2}{3}\r\n", indent, name, text, lastComma);

                node.FormatParamsCount = valueWithParams.Length - 1;
            }
        }
    }

    private static string MakeFirstUpper(string name)
    {
        return char.ToUpperInvariant(name[0]) + name.Substring(1);
    }

    private static string[] ParseFormatString(string value, bool forceAnonymousParam)
    {
        var names = new Dictionary<int, string>();
        int maxNumber = -1;

        bool hasEscapedBraces = false;

        var replace = Regex.Replace(value, @"{(\d+)(\:([^}]+))?}", m =>
        {
            int startIndex = m.Groups[0].Index;
            if (startIndex > 0 && value[startIndex - 1] == '{')
            {
                hasEscapedBraces = true;
                return m.Groups[0].Value;
            }

            var id = int.Parse(m.Groups[1].Value);
            if (id > maxNumber)
            {
                maxNumber = id;
            }

            var name = m.Groups.Count == 4 ? m.Groups[3].Value : null;
            if (string.IsNullOrWhiteSpace(name) || forceAnonymousParam)
            {
                if (!forceAnonymousParam)
                {
                    // Disallow anonymous parameters
                    throw new Exception("Every format parameter should be named");
                }
                name = "param" + id;
            }

            if (names.ContainsKey(id))
            {
                if (names[id] != name)
                {
                    throw new Exception(string.Format("Text [{0}]: Parameter [{1}] uses different names: [{2}] and [{3}]", value, id, names[id], name));
                }
            }
            else
            {
                names[id] = name;
            }

            return "{" + id + "}";
        });

        if (names.Count > 0 && names.Count != maxNumber + 1)
        {
            throw new Exception(string.Format("Text [{0}]: all parameters should be either named or not", value));
        }

        if (hasEscapedBraces && names.Keys.Count == 0)
        {
            return new[] { replace.Replace("{{", "{").Replace("}}", "}") };
        }

        return new[] { replace }.Concat(names.Keys.OrderBy(x => x).Select(x => names[x])).ToArray();
    }

    private static string ReplaceTestMode(string val)
    {
        const string from = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
        const string to =   "âḃčđêƒğĥĩĵķĺṁńőƥɋŕşťũѷŵχŷȥÂḂČĐÊƑĞĤĨĴĶĹṀŃŐƤɊŔŞŤŨѶŴΧŶȤ";
        var sb = new StringBuilder(val);

        for (int i = 0; i < from.Length; i++)
        {
            sb.Replace(from[i], to[i]);
        }

        return sb.ToString();
    }

    #>
